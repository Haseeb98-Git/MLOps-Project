{"timestamp":"2025-05-14T02:55:53.061319","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-14T02:55:53.061769","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-14T02:55:54.754761Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:54.754981Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:54.755027Z","level":"info","event":"Current task name:collect_weather_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:54.755056Z","level":"info","event":"Dag name:weather_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:54.742928","level":"info","event":"Starting weather data collection","logger":"root"}
{"timestamp":"2025-05-14T02:55:55.760775","level":"info","event":"Weather data collected and saved successfully","logger":"root"}
{"timestamp":"2025-05-14T02:55:55.761276","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-14T02:55:55.771435Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:55.771593Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:55:55.771641Z","level":"info","event":"Task operator:<Task(PythonOperator): collect_weather_data>","chan":"stdout","logger":"task"}
