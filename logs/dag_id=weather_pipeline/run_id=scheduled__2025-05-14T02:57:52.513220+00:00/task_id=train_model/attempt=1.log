{"timestamp":"2025-05-14T02:57:59.876562","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-14T02:57:59.876953","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/weather_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-14T02:58:01.535271Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.535473Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.535535Z","level":"info","event":"Current task name:train_model","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.535614Z","level":"info","event":"Dag name:weather_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562327Z","level":"error","event":"2025/05/14 02:58:01 WARNING mlflow.utils.git_utils: Failed to import Git (the Git executable is probably not on your PATH), so Git SHA is not available. Error: Failed to initialize: Bad git executable.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562468Z","level":"error","event":"The git executable must be specified in one of the following ways:","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562516Z","level":"error","event":"    - be included in your $PATH","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562559Z","level":"error","event":"    - be set via $GIT_PYTHON_GIT_EXECUTABLE","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562596Z","level":"error","event":"    - explicitly set via git.refresh(<full-path-to-git-executable>)","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562633Z","level":"error","event":"","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562670Z","level":"error","event":"All git commands will error until this is rectified.","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562707Z","level":"error","event":"","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562743Z","level":"error","event":"This initial message can be silenced or aggravated in the future by setting the","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562778Z","level":"error","event":"$GIT_PYTHON_REFRESH environment variable. Use one of the following values:","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562811Z","level":"error","event":"    - quiet|q|silence|s|silent|none|n|0: for no message or exception","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562844Z","level":"error","event":"    - warn|w|warning|log|l|1: for a warning message (logging level CRITICAL, displayed by default)","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562877Z","level":"error","event":"    - error|e|exception|raise|r|2: for a raised exception","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562910Z","level":"error","event":"","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.562944Z","level":"error","event":"Example:","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.563065Z","level":"error","event":"    export GIT_PYTHON_REFRESH=quiet","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.563102Z","level":"error","event":"","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.644418Z","level":"info","event":"Training R¬≤ score: 1.000","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.644554Z","level":"info","event":"Testing R¬≤ score: 1.000","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:01.644637Z","level":"info","event":"Model saved to data/model.pkl","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.447651Z","level":"error","event":"\u001b[31m2025/05/14 02:58:05 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.494223Z","level":"info","event":"üèÉ View run judicious-bug-841 at: http://mlflow:5000/#/experiments/0/runs/9698ae0f93004f93b93286a70d419957","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.494380Z","level":"info","event":"üß™ View experiment at: http://mlflow:5000/#/experiments/0","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.504242","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-14T02:58:05.517409Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.517525Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-14T02:58:05.517564Z","level":"info","event":"Task operator:<Task(PythonOperator): train_model>","chan":"stdout","logger":"task"}
